
/*
 * GraphDesigner.java
 *
 * Created on Nov 9, 2010, 10:22:58 PM
 */

package eGraph;

/*import com.intel.adp.AdpRuntimeException;
import com.intel.adp.AdpWarningException;
import com.intel.adp.Application;
import com.intel.adp.ApplicationId;
import com.intel.adp.InitializationException;
import com.intel.adp.UnauthorizedException;*/
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.filechooser.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;

/**
 *
 * @author Sean K Anderson - Data Virtue 2010
 * http://www.datavirtue.com
 * Developed in Netbeans 6.9.1
 * eGraph Binary and Source Code: Creative Commons Attribution 3.0 License
 * http://creativecommons.org/licenses/by-sa/3.0/
 * You must leave in-application attribution of credit to Data Virtue (www.datavirtue.com)
 * in any derivative work using this source code. You also cannot charge for any derivative work
 * based on this source code without permission of the orginal author, Sean K Anderson.
 * You are free to distribute this application for educational purposes including
 * inclusion with for-profit text books. The source code can be used for programming
 * courses and the application may be used in fee-based course work or college classroom settings.
 * If you have questions, or require an explicit license for your organization, contact:
 * software@datavirtue.com
 *
 */
public class GraphDesigner extends javax.swing.JFrame {

    /** Creates new form GraphDesigner */
    public GraphDesigner() {

        /* This code loads an image file from the res folder in the project files */
        Toolkit tools = Toolkit.getDefaultToolkit();
        winIcon = tools.getImage(getClass().getResource("/res/eGraph.png"));
        /* this code is placed before the initComponents() method and winIcon variable
         is specified in the netbeans properties for JFrame.iconImage*/
         System.setProperty("http.agent", "eGraph 1.2.0");
        
         initComponents();
         qRangeLabel.requestFocus();

        this.addWindowListener(new java.awt.event.WindowAdapter(){
	public void windowClosing(java.awt.event.WindowEvent e){
            //closeApp();
	}} );
        
        //intelAppUpInit();
        designScrollPane.getVerticalScrollBar().setUnitIncrement(10);
        
        
    }

    //private Application app = null;
 /*   private void intelAppUpInit() {
                //System.out.println("ADP API Level: " + AdpConstants.ADP_API_LEVEL);
		//System.out.println("ADP API Version: " + AdpConstants.ADP_API_VERSION);
                    //new ApplicationId(0x11BF648C,0x54AD43AE,0x91C1638D,0x26BBA87F);
		try{//0x11BF648C,0x54AD43AE,0x91C1638D,0x26BBA87F
			app = new Application(ApplicationId.DEBUG_ID);
                        app.beginEvent();
			//System.out.println("Application Authorized to run");

		}catch(InitializationException e){
			javax.swing.JOptionPane.showMessageDialog(null, "Intel AppUp initialization error: " + e.getCode());
		}catch(UnauthorizedException e){
                    javax.swing.JOptionPane.showMessageDialog(null, "You are not licensed to run this application on this device.");
		}catch(AdpRuntimeException e){
			javax.swing.JOptionPane.showMessageDialog(null, "A runtime error occurred with the Intel AppUp system. Error: "+e.getCode());
                }
    }

    private void closeApp(){
        if(app != null){
            try {
                app.endEvent();
            } catch (AdpRuntimeException ex) {
               javax.swing.JOptionPane.showMessageDialog(null, "A runtime error occurred trying to close the app. ");
            } catch (AdpWarningException ex) {
                javax.swing.JOptionPane.showMessageDialog(null, "A runtime warning occurred trying to close the app. ");
            }
            app.dispose();
		app = null;

                System.out.println("eGraph successfully closed.");

		}

    }*/

private Image winIcon;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eGraphTabPane = new javax.swing.JTabbedPane();
        worksheetDesignPanel = new javax.swing.JPanel();
        designConfigPanel = new javax.swing.JPanel();
        qRangeLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rangeSpinner = new javax.swing.JSpinner();
        sizeSpinner = new javax.swing.JSpinner();
        leftSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        perPageSpinner = new javax.swing.JSpinner();
        portraitBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        topSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        rightSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        bottomSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        rtSpacingSpinner = new javax.swing.JSpinner();
        linkLabel = new javax.swing.JLabel();
        btSpacingSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        labelBox = new javax.swing.JCheckBox();
        jToolBar1 = new javax.swing.JToolBar();
        printButton = new javax.swing.JButton();
        buildButton = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        designScrollPane = new javax.swing.JScrollPane();
        welcomeIconLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        plotPanel1 = new eGraph.SlopeInterceptDemoPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("eGraph 1.2 - The Free Graph Worksheet Builder for Algebra");
        setIconImage(winIcon);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        designConfigPanel.setBackground(new java.awt.Color(255, 255, 255));
        designConfigPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        qRangeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        qRangeLabel.setText("Q-Range");
        qRangeLabel.setNextFocusableComponent(rangeSpinner);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Size");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Left Margin");

        rangeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(8), null, null, Integer.valueOf(1)));
        rangeSpinner.setToolTipText("Quadrant Range");
        rangeSpinner.setFocusCycleRoot(true);
        rangeSpinner.setNextFocusableComponent(sizeSpinner);
        rangeSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rangeSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rangeSpinnerFocusLost(evt);
            }
        });

        sizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(144.0f), null, null, Float.valueOf(9.0f)));
        sizeSpinner.setToolTipText("Graph Size in Points (72pts/inch - 3pts/mm)");
        sizeSpinner.setNextFocusableComponent(labelBox);
        sizeSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sizeSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sizeSpinnerFocusLost(evt);
            }
        });

        leftSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(35.0f), null, null, Float.valueOf(9.0f)));
        leftSpinner.setToolTipText("Margin in points (72pts/inch - 3pts/mm)");
        leftSpinner.setNextFocusableComponent(rtSpacingSpinner);
        leftSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                leftSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                leftSpinnerFocusLost(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Per Page");

        perPageSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(9), null, null, Integer.valueOf(1)));
        perPageSpinner.setToolTipText("How many per page");
        perPageSpinner.setNextFocusableComponent(topSpinner);
        perPageSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                perPageSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                perPageSpinnerFocusLost(evt);
            }
        });

        portraitBox.setSelected(true);
        portraitBox.setText("Portrait");
        portraitBox.setNextFocusableComponent(perPageSpinner);
        portraitBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portraitBoxActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Top Margin");

        topSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(92.0f), null, null, Float.valueOf(9.0f)));
        topSpinner.setToolTipText("Margin in points (72pts/inch - 3pts/mm)");
        topSpinner.setNextFocusableComponent(rightSpinner);
        topSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                topSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                topSpinnerFocusLost(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Right Margin");

        rightSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(35.0f), null, null, Float.valueOf(9.0f)));
        rightSpinner.setToolTipText("Margin in points (72pts/inch - 3pts/mm)");
        rightSpinner.setNextFocusableComponent(bottomSpinner);
        rightSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rightSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rightSpinnerFocusLost(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Bot Margin");

        bottomSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(20.0f), null, null, Float.valueOf(9.0f)));
        bottomSpinner.setToolTipText("Margin in points (72pts/inch - 3pts/mm)");
        bottomSpinner.setNextFocusableComponent(leftSpinner);
        bottomSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bottomSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bottomSpinnerFocusLost(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Rt Spacing");

        rtSpacingSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(50.0f), null, null, Float.valueOf(9.0f)));
        rtSpacingSpinner.setToolTipText("Right spacing of the graphs (72pts/inch - 3pts/mm)");
        rtSpacingSpinner.setNextFocusableComponent(btSpacingSpinner);
        rtSpacingSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rtSpacingSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rtSpacingSpinnerFocusLost(evt);
            }
        });

        linkLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        linkLabel.setForeground(new java.awt.Color(51, 51, 255));
        linkLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linkLabel.setText("www.datavirtue.com");
        linkLabel.setToolTipText("Visit datavirtue.com to learn more.");
        linkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                linkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                linkLabelMouseExited(evt);
            }
        });

        btSpacingSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(72.0f), null, null, Float.valueOf(9.0f)));
        btSpacingSpinner.setToolTipText("Bottom spacing of the graphs (72pts/inch - 3pts/mm)");
        btSpacingSpinner.setNextFocusableComponent(buildButton);
        btSpacingSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btSpacingSpinnerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btSpacingSpinnerFocusLost(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Bot Spacing");

        labelBox.setText("Show Numbers");
        labelBox.setNextFocusableComponent(portraitBox);
        labelBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelBoxActionPerformed(evt);
            }
        });

        jToolBar1.setRollover(true);

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/print.png"))); // NOI18N
        printButton.setText("Print");
        printButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        printButton.setNextFocusableComponent(saveButton);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(printButton);

        buildButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/show.png"))); // NOI18N
        buildButton.setText("Build");
        buildButton.setToolTipText("Build Graph Page");
        buildButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        buildButton.setNextFocusableComponent(printButton);
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(buildButton);

        jToolBar2.setRollover(true);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/media-floppy-green.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        saveButton.setNextFocusableComponent(loadButton);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(saveButton);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/upload.png"))); // NOI18N
        loadButton.setText("Load");
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        loadButton.setNextFocusableComponent(rangeSpinner);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(loadButton);

        javax.swing.GroupLayout designConfigPanelLayout = new javax.swing.GroupLayout(designConfigPanel);
        designConfigPanel.setLayout(designConfigPanelLayout);
        designConfigPanelLayout.setHorizontalGroup(
            designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, designConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(portraitBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addGroup(designConfigPanelLayout.createSequentialGroup()
                        .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                        .addGap(13, 13, 13)
                        .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSpacingSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(rtSpacingSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(leftSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(perPageSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(topSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(bottomSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(rightSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addGroup(designConfigPanelLayout.createSequentialGroup()
                        .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(qRangeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(rangeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                    .addComponent(linkLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addContainerGap())
        );
        designConfigPanelLayout.setVerticalGroup(
            designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(designConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qRangeLabel)
                    .addComponent(rangeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelBox)
                .addGap(8, 8, 8)
                .addComponent(portraitBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(perPageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(topSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(rightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(bottomSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(leftSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(rtSpacingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(designConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSpacingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(linkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        designScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        welcomeIconLabel.setBackground(new java.awt.Color(102, 102, 102));
        welcomeIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/eGraph128.png"))); // NOI18N
        welcomeIconLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        designScrollPane.setViewportView(welcomeIconLabel);

        javax.swing.GroupLayout worksheetDesignPanelLayout = new javax.swing.GroupLayout(worksheetDesignPanel);
        worksheetDesignPanel.setLayout(worksheetDesignPanelLayout);
        worksheetDesignPanelLayout.setHorizontalGroup(
            worksheetDesignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(worksheetDesignPanelLayout.createSequentialGroup()
                .addComponent(designConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(designScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))
        );
        worksheetDesignPanelLayout.setVerticalGroup(
            worksheetDesignPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(designConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(designScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
        );

        eGraphTabPane.addTab("Designer", worksheetDesignPanel);

        plotPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                plotPanel1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plotPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plotPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
        );

        eGraphTabPane.addTab("Slope Intercept Demo", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eGraphTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eGraphTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portraitBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portraitBoxActionPerformed
        buildGraph(false);
    }//GEN-LAST:event_portraitBoxActionPerformed

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        buildGraph(false);
    }//GEN-LAST:event_buildButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        buildGraph(true);

    }//GEN-LAST:event_printButtonActionPerformed

    private void linkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseEntered
        this.useHandCursor();
    }//GEN-LAST:event_linkLabelMouseEntered

    private void linkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseExited
        this.useDefaultCursor();
    }//GEN-LAST:event_linkLabelMouseExited

    private void linkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseClicked
        openBrowser("http://www.datavirtue.com");
        
    }//GEN-LAST:event_linkLabelMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveDef();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        loadDef();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void labelBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelBoxActionPerformed
        buildGraph(false);
    }//GEN-LAST:event_labelBoxActionPerformed

    private void plotPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_plotPanel1KeyPressed
       
    }//GEN-LAST:event_plotPanel1KeyPressed

    private void perPageSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_perPageSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_perPageSpinnerFocusGained

    private void rangeSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rangeSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_rangeSpinnerFocusGained

    private void sizeSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sizeSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_sizeSpinnerFocusGained

    private void topSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_topSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_topSpinnerFocusGained

    private void rightSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rightSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_rightSpinnerFocusGained

    private void bottomSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bottomSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_bottomSpinnerFocusGained

    private void leftSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_leftSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_leftSpinnerFocusGained

    private void rtSpacingSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rtSpacingSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_rtSpacingSpinnerFocusGained

    private void btSpacingSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btSpacingSpinnerFocusGained
        setSpinnerColor(evt);
    }//GEN-LAST:event_btSpacingSpinnerFocusGained

    private void rangeSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rangeSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_rangeSpinnerFocusLost

    private void sizeSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sizeSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_sizeSpinnerFocusLost

    private void perPageSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_perPageSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_perPageSpinnerFocusLost

    private void topSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_topSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_topSpinnerFocusLost

    private void rightSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rightSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_rightSpinnerFocusLost

    private void bottomSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bottomSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_bottomSpinnerFocusLost

    private void leftSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_leftSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_leftSpinnerFocusLost

    private void rtSpacingSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rtSpacingSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_rtSpacingSpinnerFocusLost

    private void btSpacingSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btSpacingSpinnerFocusLost
        defaultSpinnerColor(evt);
    }//GEN-LAST:event_btSpacingSpinnerFocusLost

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       
    }//GEN-LAST:event_formMouseClicked

    private void setSpinnerColor(java.awt.event.FocusEvent evt){

        Component c = (Component)evt.getSource();
        if (c instanceof JSpinner) {

            JSpinner s = (JSpinner)c;
            ((JSpinner.NumberEditor)s.getEditor()).getTextField().setBackground(new java.awt.Color(225, 238, 249));

        }

    }

    private void defaultSpinnerColor(java.awt.event.FocusEvent evt){

        Component c = (Component)evt.getSource();
        if (c instanceof JSpinner) {

            JSpinner s = (JSpinner)c;
            ((JSpinner.NumberEditor)s.getEditor()).getTextField().setBackground(new java.awt.Color(255, 255, 255));

        }

    }
    private String current_file = "";
    /** Calling this shows a JFileChooser dialog and loads a valid .egd file */
    private void loadDef(){
        /* Java Properties object to read in "key = value" fields from a .egd text file */
        Properties props = new Properties();

        /* Setup and show a file dialog allowing the user to select a .egd file */
        JFileChooser jfc = new JFileChooser(current_file);
        jfc.setSelectedFile(new File(current_file));
        jfc.setDialogTitle("Load eGraph Definition File (.egd)");
        /* Only allow the user to select a file (specifically .egd files, although they can choose All Files) */
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new ExtensionFileFilter(".EGD Files", new String[] { "EGD", "egd" });
        jfc.setFileFilter(filter);
        /* the JFileChooser method returns an integer value denoting the status of the file dialog based on the user's choice */
        int status = jfc.showOpenDialog(this);
        /* Exit the method if the user hit cancel */
        if (status == JFileChooser.CANCEL_OPTION) return;

        File file = jfc.getSelectedFile();
        String f = file.getPath().toLowerCase();
        /* Check to certify the user chose a .egd file */
        if (!f.endsWith(".egd")){
            /* if ext is not valid, append .egd ext and check  */
            if (new File(f+".egd").exists()){
                file = new File(f+".egd");
                f = file.getPath();
            }else{
                JOptionPane.showMessageDialog(null,
                        "You must select a eGraph Definition File (.egd)");
                return;
            }
        }
        /* Use the Java Properties object to load the values from the .egd file chosen by the user */
        try {
            props.load(new FileInputStream(f));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "There was a problem when trying to open the file.");
            return;
        }
        try{
        /* Use of the Properties object to obtain a values for the (QRANGE) keys 
           placing their value in the JSpinner GUI objects
         */
        rangeSpinner.setValue(Integer.parseInt(props.getProperty("QRANGE")));
        sizeSpinner.setValue(Float.parseFloat(props.getProperty("SIZE")));
        portraitBox.setSelected(Boolean.parseBoolean(props.getProperty("ORIENTATION")));
        perPageSpinner.setValue(Integer.parseInt(props.getProperty("PERPAGE")));

        topSpinner.setValue(Float.parseFloat(props.getProperty("TOP")));
        rightSpinner.setValue(Float.parseFloat(props.getProperty("RIGHT")));
        bottomSpinner.setValue(Float.parseFloat(props.getProperty("BOTTOM")));
        leftSpinner.setValue(Float.parseFloat(props.getProperty("LEFT")));
        rtSpacingSpinner.setValue(Float.parseFloat(props.getProperty("RTSPC")));
        btSpacingSpinner.setValue(Float.parseFloat(props.getProperty("BTSPC")));
        current_file = f;
        }catch(Exception e) {

            JOptionPane.showMessageDialog(null, "There was a problem when trying to parse the file.");
            current_file="";
            return;
        }
        /* Build/display the graph after loading from the .egd file */
        this.buildGraph(false);
        
    }

    /** Calling this shows a JFileChooser dialog and saves the values of the JSpinner GUI objects to a .egd text file */
    private void saveDef(){
        /* See loadDef() docs above for info on the top portion of this method */
        JFileChooser jfc = new JFileChooser(current_file);
        jfc.setSelectedFile(new File(current_file));
        jfc.setDialogTitle("Save eGraph Definition File (.egd)");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filter = new ExtensionFileFilter(".EGD Files", new String[] { "EGD", "egd" });
        jfc.setFileFilter(filter);
        int status = jfc.showSaveDialog(this);

        if (status == JFileChooser.CANCEL_OPTION) return;

        File file = jfc.getSelectedFile();
        String f = file.getPath().toLowerCase();
        if (!f.endsWith(".egd")){
            file = new File(file.getPath()+".egd");
        }

        /* get the end-of-line character for the platform eGraph is running on (Windows, Linux, etc..) */
        String nl = System.getProperty("line.separator");
        /* Instead of using a Properties object I used a PrintWriter object to build the
           text file for storing the key = value pairs. Notice, the nl (New Line character)
           at the end of each line. 
         */
        try {
            PrintWriter out = new PrintWriter(
                    new BufferedWriter(
                     new FileWriter (file, false) ) );

                out.write("QRANGE = "+rangeSpinner.getValue()+nl);
                out.write("SIZE = "+sizeSpinner.getValue()+nl);
                out.write("ORIENTATION = "+Boolean.toString(portraitBox.isSelected())+nl);
                out.write("PERPAGE = "+perPageSpinner.getValue()+nl);
                out.write("TOP = "+topSpinner.getValue()+nl);
                out.write("RIGHT = "+rightSpinner.getValue()+nl);
                out.write("BOTTOM = "+bottomSpinner.getValue()+nl);
                out.write("LEFT = "+leftSpinner.getValue()+nl);
                out.write("RTSPC = "+rtSpacingSpinner.getValue()+nl);
                out.write("BTSPC = "+btSpacingSpinner.getValue()+nl);
                
            out.close();
            current_file = f;
            out = null;
            return;

        } catch (Exception e) {
            current_file = "";
            javax.swing.JOptionPane.showMessageDialog(null, "Problem accessing file: " + file.getPath() + System.getProperty("line.separator")+
                    "The file may be locked by another application.");

            return;
        }

    }

    /* Called to set the GUI mouse cursor to the hand pointer for link text */
    private void useHandCursor(){
        Cursor c = new Cursor ( Cursor.HAND_CURSOR );
        this.setCursor(c);

    }
    /* Called to set the GUI mopuse pointer to the default common arrow style */
    private void useDefaultCursor(){
        Cursor c = new Cursor ( Cursor.DEFAULT_CURSOR );
        this.setCursor(c);
    }

    /* Uses Java Desktop funtionality from Java 6+ to launch a browser with link */
    private void openBrowser(String link){
        /* Make sure the Desktop class is available, if running on Java 5,
         java.awt.Desktop is not available  */
        try {
            Class<?> d = Class.forName("java.awt.Desktop");
        }catch (Exception ignore) { 
            JOptionPane.showMessageDialog(null, 
                    "eGraph requires Java 6+ to automatically launch a web browser.");
            return;
        }
        /* If Desktop class is available we need to check for OS support */
        if (Desktop.isDesktopSupported()){
            Desktop desktop = Desktop.getDesktop();
            /* If Desktop is supported we need to make sure the browser option is supported */
            if (desktop.isSupported(Desktop.Action.BROWSE)){
                java.net.URI uri = null;
                try {
                    uri = new java.net.URI(link);
                } catch (URISyntaxException ex) {

                    return;
                }
                try {
                    if (uri == null) return;
                    desktop.browse(uri);
                    return;
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "For some reason, your system doesn't support Java Desktop.");
                    return;
                }

            }
            JOptionPane.showMessageDialog(null, "For some reason, your system doesn't support Java Desktop.");
        }
    }

    /**The main handler method for building and displaying the graphs */
    private void buildGraph(boolean print){

        /* Get the user defined values from the GUI objects and store them in variables
           to build the GraphPanel object.
         */
        int range = (Integer)rangeSpinner.getValue();
        float size = (Float)sizeSpinner.getValue();
        int per_page = (Integer)perPageSpinner.getValue();
        float top = (Float)topSpinner.getValue();
        float right = (Float)rightSpinner.getValue();
        float bottom = (Float)bottomSpinner.getValue();
        float left = (Float)leftSpinner.getValue();
        float rt_spacing = (Float)rtSpacingSpinner.getValue();
        float bt_spacing = (Float)btSpacingSpinner.getValue();

        /* Instantiate the GraphPanel object that handles drawing and displaying the graphs */
        GraphWorksheetCanvas graphPanel = new GraphWorksheetCanvas(range, size,
                top, right, bottom, left, rt_spacing, bt_spacing, per_page,
                portraitBox.isSelected(), labelBox.isSelected());

        if (portraitBox.isSelected()) graphPanel.setPreferredSize(new Dimension(612,792));
        else { graphPanel.setPreferredSize(new Dimension(792,612)); }

        graphPanel.setDoubleBuffered(false);
        /* Initiates the print functionality of GraphPanel */
        /* This may not be the most efficient use of this call */
        if (print) graphPanel.doPrint();
                
        /* A common mistake is to use scrollPane.add(graphPanel) */
        designScrollPane.setViewportView(graphPanel);
        /* Refresh the GUI after adding the new GraphPanel object */
        this.validate();
        
    }
    /**
    * this is the method used to launch the program for the user
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphDesigner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner bottomSpinner;
    private javax.swing.JSpinner btSpacingSpinner;
    private javax.swing.JButton buildButton;
    private javax.swing.JPanel designConfigPanel;
    private javax.swing.JScrollPane designScrollPane;
    private javax.swing.JTabbedPane eGraphTabPane;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JCheckBox labelBox;
    private javax.swing.JSpinner leftSpinner;
    private javax.swing.JLabel linkLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JSpinner perPageSpinner;
    private eGraph.SlopeInterceptDemoPanel plotPanel1;
    private javax.swing.JCheckBox portraitBox;
    private javax.swing.JButton printButton;
    private javax.swing.JLabel qRangeLabel;
    private javax.swing.JSpinner rangeSpinner;
    private javax.swing.JSpinner rightSpinner;
    private javax.swing.JSpinner rtSpacingSpinner;
    private javax.swing.JButton saveButton;
    private javax.swing.JSpinner sizeSpinner;
    private javax.swing.JSpinner topSpinner;
    private javax.swing.JLabel welcomeIconLabel;
    private javax.swing.JPanel worksheetDesignPanel;
    // End of variables declaration//GEN-END:variables

}





